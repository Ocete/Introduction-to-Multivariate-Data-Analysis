beta_hat
# least square estimates
beta_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y
fractions(beta_hat)
# least square estimates
beta_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y
beta_hat
# R^2 statistic
R_square <- 1 - sum((Y - Z%*%beta_hat)^2)/sum((Y-mean(Y))^2)
R_square
# sigma_hat_square
sigma_hat_square <- sum((Y - Z%*%beta_hat)^2)/(n-r-1)
fractions(sigma_hat_square)
# estimated covariance of hat{beta}
covariance_hat <- sigma_hat_square * solve(t(Z)%*%Z)
fractions(covariance_hat)
# sigma_hat_square
sigma_hat_square <- sum((Y - Z%*%beta_hat)^2)/(n-r-1)
sigma_hat_square
# estimated covariance of hat{beta}
covariance_hat <- sigma_hat_square * solve(t(Z)%*%Z)
covariance_hat
# One-at-a-time confidence interval for beta_j
j <- 1
cat('[',
beta_hat[j+1] - qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# t-test for single coefficient
# H_0: beta_j = 0, H_a: beta_j != 0
j <- 1
t_stat <- (beta_hat[j+1] - 0)/sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1])
t_stat
alpha <- 0.05
cval_t <- qt(1-alpha/2, n-r-1)
cval_t
# One-at-a-time confidence interval for beta_j
j <- 1
cat('[',
beta_hat[j+1] - qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# One-at-a-time confidence interval for beta_j
j <- 0
cat('[',
beta_hat[j+1] - qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# One-at-a-time confidence interval for beta_j
j <- 1
cat('[',
beta_hat[j+1] - qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# One-at-a-time confidence interval for beta_j
j <- 2
cat('[',
beta_hat[j+1] - qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 0
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 1
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 0
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 1
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 0
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 1
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# F-test
# H_0: beta_1 = beta_2 = 0
C <- matrix(c(0,0,1,0,0,1),2,3)
df_1 <- qr(C)$rank # df_1: rank of matrix R
f_stat <- t(C%*%beta_hat)%*%solve(C%*%solve(t(Z)%*%Z)%*%t(C))%*%(C%*%beta_hat)
f_stat
cval_f <- sigma_hat_square*df_1*qf(1-alpha, 2, n-r-1)
cval_f
# (equivalent) F-test by comparing residuals
# fit the reduced model
beta_hat_reduced <- solve(t(Z[,1])%*%Z[,1])%*%t(Z[,1])%*%Y
beta_hat_reduced
f_stat_reduced <- ((sum((Y - Z[,1]%*%beta_hat_reduced)^2) - sum((Y - Z%*%beta_hat)^2))/2)/sigma_hat_square
f_stat_reduced
# F-test
# H_0: beta_1 = beta_2 = 0
C <- matrix(c(0,0,1,0,0,1),2,3)
df_1 <- qr(C)$rank # df_1: rank of matrix R
f_stat <- t(C%*%beta_hat)%*%solve(C%*%solve(t(Z)%*%Z)%*%t(C))%*%(C%*%beta_hat)
f_stat
cval_f <- sigma_hat_square*df_1*qf(1-alpha, 2, n-r-1)
cval_f
# (equivalent) F-test by comparing residuals
# fit the reduced model
beta_hat_reduced <- solve(t(Z[,1])%*%Z[,1])%*%t(Z[,1])%*%Y*sigma_hat_square*df_1
beta_hat_reduced
f_stat_reduced <- sum((Y - Z[,1]%*%beta_hat_reduced)^2) - sum((Y - Z%*%beta_hat)^2)
f_stat_reduced
knitr::opts_chunk$set(echo = TRUE)
# F-test
# H_0: beta_1 = beta_2 = 0
C <- matrix(c(0,0,1,0,0,1),2,3)
df_1 <- qr(C)$rank # df_1: rank of matrix R
f_stat <- t(C%*%beta_hat)%*%solve(C%*%solve(t(Z)%*%Z)%*%t(C))%*%(C%*%beta_hat)
f_stat
cval_f <- sigma_hat_square*df_1*qf(1-alpha, 2, n-r-1)
cval_f
# (equivalent) F-test by comparing residuals
# fit the reduced model
beta_hat_reduced <- solve(t(Z[,1])%*%Z[,1])%*%t(Z[,1])%*%Y
beta_hat_reduced
f_stat_reduced <- ((sum((Y - Z[,1]%*%beta_hat_reduced)^2) - sum((Y - Z%*%beta_hat)^2))/2)/sigma_hat_square
f_stat_reduced
Z[,1]
Z[,2]
z
Z
Z
Y
Z[,1]
Z[,2]
sum(Z[,2])
sum(Z[,2])/n
Z
# data
Y <- state.x77[,5]
n <- length(Y)
Z <- cbind(rep(1,n),as.matrix(state.x77[,6:7]))
r <- dim(Z)[2]-1
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
# data
Y <- state.x77[,5]
n <- length(Y)
Z <- cbind(rep(1,n),as.matrix(state.x77[,6:7]))
r <- dim(Z)[2]-1
# least square estimates
beta_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y
fractions(beta_hat)
# R^2 statistic
R_square <- 1 - sum((Y - Z%*%beta_hat)^2)/sum((Y-mean(Y))^2)
fractions(R_square)
# sigma_hat_square
sigma_hat_square <- sum((Y - Z%*%beta_hat)^2)/(n-r-1)
fractions(sigma_hat_square)
# estimated covariance of hat{beta}
covariance_hat <- sigma_hat_square * solve(t(Z)%*%Z)
fractions(covariance_hat)
# t-test for single coefficient
# H_0: beta_j = 0, H_a: beta_j != 0
j <- 1
t_stat <- (beta_hat[j+1] - 0)/sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1])
t_stat
alpha <- 0.05
cval_t <- qt(1-alpha/2, n-r-1)
cval_t
# One-at-a-time confidence interval for beta_j
j <- 1
cat('[',
beta_hat[j+1] - qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# F-test
# H_0: beta_1 = beta_2 = 0
C <- matrix(c(0,0,1,0,0,1),2,3)
df_1 <- qr(C)$rank # df_1: rank of matrix R
f_stat <- t(C%*%beta_hat)%*%solve(C%*%solve(t(Z)%*%Z)%*%t(C))%*%(C%*%beta_hat)
f_stat
cval_f <- sigma_hat_square*df_1*qf(1-alpha, 2, n-r-1)
cval_f
# (equivalent) F-test by comparing residuals
# fit the reduced model
beta_hat_reduced <- solve(t(Z[,1])%*%Z[,1])%*%t(Z[,1])%*%Y
beta_hat_reduced
f_stat_reduced <- ((sum((Y - Z[,1]%*%beta_hat_reduced)^2) - sum((Y - Z%*%beta_hat)^2))/2)/sigma_hat_square
f_stat_reduced
# confidence interval for z_0^T beta
z01 <- sum(Z[,2])/n
z01 <- sum(Z[,3])/n
z_0 <- c(1, z01, z02)
# confidence interval for z_0^T beta
z01 <- sum(Z[,2])/n
z02 <- sum(Z[,3])/n
z_0 <- c(1, z01, z02)
cat('[',
z_0%*%beta_hat - sqrt(sigma_hat_square)*sqrt(t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
',',
z_0%*%beta_hat + sqrt(sigma_hat_square)*sqrt(t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
']')
# prediction interval for Y_0 = z_0^T beta + epsilon_0
cat('[',
z_0%*%beta_hat - sqrt(sigma_hat_square)*sqrt(1+t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
',',
z_0%*%beta_hat + sqrt(sigma_hat_square)*sqrt(1+t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
']')
# Confidence Region for (beta_1, beta_2)^T
center <- beta_hat[2:3]
es<-eigen(R%*%solve(t(Z)%*%Z)%*%t(R))
# data
data <- matrix(scan("T7-1.DAT", what=numeric(), nrow=15))
# data
data <- matrix(scan("T7-1.DAT", what=numeric()))
Y <- state.x77[,5]
n <- length(Y)
Z <- cbind(rep(1,n),as.matrix(state.x77[,6:7]))
r <- dim(Z)[2]-1
data
# data
data <- matrix(scan("T7-1.DAT", what=numeric()), nrows=3)
# data
data <- matrix(scan("T7-1.DAT", what=numeric()), nrow=3)
Y <- state.x77[,5]
n <- length(Y)
Z <- cbind(rep(1,n),as.matrix(state.x77[,6:7]))
r <- dim(Z)[2]-1
data
# data
data <- matrix(scan("T7-1.DAT", what=numeric()), ncol=3)
Y <- state.x77[,5]
n <- length(Y)
Z <- cbind(rep(1,n),as.matrix(state.x77[,6:7]))
r <- dim(Z)[2]-1
data
# data
data <- matrix(scan("T7-1.DAT", what=numeric()), nrow=20)
Y <- state.x77[,5]
n <- length(Y)
Z <- cbind(rep(1,n),as.matrix(state.x77[,6:7]))
r <- dim(Z)[2]-1
data
data[,2]
# data
data <- matrix(scan("T7-1.DAT"), nrow=20)
Y <- state.x77[,5]
n <- length(Y)
Z <- cbind(rep(1,n),as.matrix(state.x77[,6:7]))
r <- dim(Z)[2]-1
data
#import data
data <- read.table("T7-1.DAT")
#set up Z
data_matrix <- as.matrix(data)[,1:2]
Z <- cbind(c(rep(1,20)), data_matrix)
colnames(Z) <- NULL
#set up Y
Y <-  as.matrix(data[,3],20,1)
n <- length(Y)
r <- dim(Z)[2]-1
Z
Y
library(MASS)
#import data
data <- read.table("T7-1.DAT")
#set up Z
data_matrix <- as.matrix(data)[,1:2]
Z <- cbind(c(rep(1,20)), data_matrix)
colnames(Z) <- NULL
#set up Y
Y <-  as.matrix(data[,3],20,1)
n <- length(Y)
r <- dim(Z)[2]-1
# least square estimates
beta_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%Y
beta_hat
# R^2 statistic
R_square <- 1 - sum((Y - Z%*%beta_hat)^2)/sum((Y-mean(Y))^2)
fractions(R_square)
# sigma_hat_square
sigma_hat_square <- sum((Y - Z%*%beta_hat)^2)/(n-r-1)
fractions(sigma_hat_square)
# estimated covariance of hat{beta}
covariance_hat <- sigma_hat_square * solve(t(Z)%*%Z)
fractions(covariance_hat)
# t-test for single coefficient
# H_0: beta_j = 0, H_a: beta_j != 0
j <- 1
t_stat <- (beta_hat[j+1] - 0)/sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1])
t_stat
alpha <- 0.05
cval_t <- qt(1-alpha/2, n-r-1)
cval_t
# One-at-a-time confidence interval for beta_j
j <- 1
cat('[',
beta_hat[j+1] - qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# F-test
# H_0: beta_1 = beta_2 = 0
C <- matrix(c(0,0,1,0,0,1),2,3)
df_1 <- qr(C)$rank # df_1: rank of matrix R
f_stat <- t(C%*%beta_hat)%*%solve(C%*%solve(t(Z)%*%Z)%*%t(C))%*%(C%*%beta_hat)
f_stat
cval_f <- sigma_hat_square*df_1*qf(1-alpha, 2, n-r-1)
cval_f
# (equivalent) F-test by comparing residuals
# fit the reduced model
beta_hat_reduced <- solve(t(Z[,1])%*%Z[,1])%*%t(Z[,1])%*%Y
beta_hat_reduced
f_stat_reduced <- ((sum((Y - Z[,1]%*%beta_hat_reduced)^2) - sum((Y - Z%*%beta_hat)^2))/2)/sigma_hat_square
f_stat_reduced
# confidence interval for z_0^T beta
z01 <- sum(Z[,2])/n
z02 <- sum(Z[,3])/n
z_0 <- c(1, z01, z02)
cat('[',
z_0%*%beta_hat - sqrt(sigma_hat_square)*sqrt(t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
',',
z_0%*%beta_hat + sqrt(sigma_hat_square)*sqrt(t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
']')
# prediction interval for Y_0 = z_0^T beta + epsilon_0
cat('[',
z_0%*%beta_hat - sqrt(sigma_hat_square)*sqrt(1+t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
',',
z_0%*%beta_hat + sqrt(sigma_hat_square)*sqrt(1+t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
']')
# Confidence Region for (beta_1, beta_2)^T
center <- beta_hat[2:3]
es<-eigen(R%*%solve(t(Z)%*%Z)%*%t(R))
# R^2 statistic
R_square <- 1 - sum((Y - Z%*%beta_hat)^2)/sum((Y-mean(Y))^2)
R_square
# sigma_hat_square
sigma_hat_square <- sum((Y - Z%*%beta_hat)^2)/(n-r-1)
sigma_hat_square
# estimated covariance of hat{beta}
covariance_hat <- sigma_hat_square * solve(t(Z)%*%Z)
covariance_hat
# t-test for single coefficient
# H_0: beta_j = 0, H_a: beta_j != 0
j <- 1
t_stat <- (beta_hat[j+1] - 0)/sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1])
t_stat
alpha <- 0.05
cval_t <- qt(1-alpha/2, n-r-1)
cval_t
# One-at-a-time confidence interval for beta_j
j <- 1
cat('[',
beta_hat[j+1] - qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/2, n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 0
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 1
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# confidence region based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + sqrt((r+1)*qf(1-alpha, r+1, n-r-1))*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 0
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 0
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 1
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# Bonferroni correction based simultaneous confidence intervals
j <- 2
cat('[',
beta_hat[j+1] - qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
',',
beta_hat[j+1] + qt(1-alpha/(2*(r+1)), n-r-1)*sqrt(sigma_hat_square * solve(t(Z)%*%Z)[j+1,j+1]),
']')
# F-test
# H_0: beta_1 = beta_2 = 0
C <- matrix(c(0,0,1,0,0,1),2,3)
df_1 <- qr(C)$rank # df_1: rank of matrix R
f_stat <- t(C%*%beta_hat)%*%solve(C%*%solve(t(Z)%*%Z)%*%t(C))%*%(C%*%beta_hat)
f_stat
cval_f <- sigma_hat_square*df_1*qf(1-alpha, 2, n-r-1)
cval_f
# (equivalent) F-test by comparing residuals
# fit the reduced model
beta_hat_reduced <- solve(t(Z[,1])%*%Z[,1])%*%t(Z[,1])%*%Y
beta_hat_reduced
f_stat_reduced <- ((sum((Y - Z[,1]%*%beta_hat_reduced)^2) - sum((Y - Z%*%beta_hat)^2))/2)/sigma_hat_square
f_stat_reduced
# confidence interval for z_0^T beta
z01 <- sum(Z[,2])/n
z02 <- sum(Z[,3])/n
z_0 <- c(1, z01, z02)
cat('[',
z_0%*%beta_hat - sqrt(sigma_hat_square)*sqrt(t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
',',
z_0%*%beta_hat + sqrt(sigma_hat_square)*sqrt(t(z_0)%*%solve(t(Z)%*%Z)%*%z_0)*qt(1-alpha/2, n-r-1),
']')
z
z_0
