new_w <- -1000*w + mid
points(c(new_w[1], mid[1]), c(new_w[2], mid[2]), type='b', col='orange')
#library(rrcov)
library(mixtools)
par(mfrow=c(1,1), mar=c(4,4,2,1))
plot(data$V1,data$V2, xlab=names[1] ,ylab=names[2],
pch=rep(c(18,20),each=28), col=rep(c(2,4), each=28), main="")
legend("topleft", legend=c("Female","Male"), pch=c(18,20), col=c(2,4), cex=1)
# Method 1
x1 <- X_1
x2 <- X_2
# compute sample mean vectors:
x1.mean <- colMeans(x1)
x2.mean <- colMeans(x2)
# compute pooled estimate for the covariance matrix:
S.u <- (n1-1)/(n1+n2-2) * var(x1) + (n2-1)/(n1+n2-2) * var(x2)
w <- solve(S.u)%*%(x1.mean-x2.mean)
w0 <- -(x1.mean+x2.mean)%*%w/2
lines(data[,1],-(w[1]*data[,1]+c(w0))/w[2])
lines(cbind(x1.mean, x2.mean))
alpha <- .05
ellipse(x1.mean, var(x1), alpha=alpha, npoints=250, newplot=FALSE)
ellipse(x2.mean, var(x2), alpha=alpha, npoints=250, newplot=FALSE)
# Compute line between mean points and the line w
points(c(x2.mean[1],x1.mean[1]), c(x2.mean[2],x1.mean[2]), type='b', col='green')
mid <- (x1.mean + x2.mean)/2
new_w <- 1000*w + mid
points(c(new_w[1], mid[1]), c(new_w[2], mid[2]), type='b', col='orange')
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
#import data, table T5-8.dat, see example 5.8
data <- read.table("data/cereal.dat")
r <- 8
#set up X
X <- data.matrix(data[,3:10])
colnames(X) <- c('Calories','Protein','Fat','Sodium','Fiber','Carbohydrates','Sugar','Potassium')
classes <- data.matrix(data[,11])
n <- length(X[,1])
plotProportions<-function(eigen_values, print=FALSE) {
ks <- c(0)
props <- c(0)
RR <- sum(eigen_values)
for (k in 1:(r+1)) {
ks <- c(ks, k)
LL_r <- sum(eigen_values[1:k])
props <- c(props, LL_r/RR)
if (print)
cat('k =',k,':', fractions(LL_r/RR), '=', LL_r, '/', RR, fill=TRUE)
}
plot(ks, props, type="b",xlim=c(0,r))
}
# Compute sample mean and S
Ones <- rep(1,n)
x_sample_mean <- 1/n * t(X)%*%Ones
S <- 1/(n-1) * t(X - Ones%*%t(x_sample_mean))%*%(X - Ones%*%t(x_sample_mean))
# eigens
ev <- eigen(S)
eigen_values <- ev$values
V <- ev$vectors
plotProportions(eigen_values, print=TRUE)
plotProportionsTogether<-function(eigen_values, eigen_values_z) {
ks <- c(0)
props <- c(0)
props_z <- c(0)
RR <- sum(eigen_values)
RR_z <- sum(eigen_values_z)
for (k in 1:(r+1)) {
ks <- c(ks, k)
LL_r <- sum(eigen_values[1:k])
props <- c(props, LL_r/RR)
LL_r_z <- sum(eigen_values_z[1:k])
props_z <- c(props_z, LL_r_z/RR_z)
}
plot(ks, props, col="red", type="b", xlab = 'Number of PCs used', ylab = 'Proportion of variance explained', xlim=c(0,r))
grid()
points(ks, props_z, type="b", col="blue")
legend('bottomright', title='Data', legend=c('Non-standarized', 'Standarized'),
col=c('red','blue'), lty=1)
}
# Com
R <- cor(X)
# eigens
ev_z <- eigen(R)
eigen_values_z <- ev_z$values
V_z <- ev_z$vectors
plotProportions(eigen_values_z, print=TRUE)
plotProportionsTogether(eigen_values, eigen_values_z)
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend(-1, 1, legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
grid()
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
grid()
plot(rep(1:r), eigen_values, type='b', col='red', xlab='Eigen-value number', ylab='Eigen-value value')
plot(rep(1:r), eigen_values_z, type='b', col='blue', xlab='Eigen-value number', ylab='Eigen-value value', newplot=FALSE)
grid()
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend(-1, 1, legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
grid()
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend("topleft", -1, 1, legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
grid()
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend("topright", -1, 1, legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
grid()
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend(-1, 1, legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
grid()
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend(1, 1, legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
grid()
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend("topright", legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
grid()
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend("topright", legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
draw.circle(0,0,radius=1, nv=100, border=NULL, col=NA, lty=1, density=NULL,
angle=45,lwd=1)
install.packages("plotrix")
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend("topright", legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
library("plotrix")
draw.circle(0,0,radius=1, nv=100, border=NULL, col=NA, lty=1, density=NULL,
angle=45,lwd=1)
grid()
V_z
norm(V_z [,1], type="2")
norm(V_z [,2], type="2")
norm(V_z [1,], type="2")
norm(V_z [1,1:2], type="2")
norm(V_z [2,1:2], type="2")
norm(V_z [3,1:2], type="2")
norm(V_z [4,1:2], type="2")
norm(V_z [5,1:2], type="2")
#import data, table T5-8.dat, see example 5.8
data <- read.table("data/cereal.dat")
r <- 8
#set up X
X <- data.matrix(data[,3:10])
colnames(X) <- c('Calories','Protein','Fat','Sodium','Fiber','Carbohydrates','Sugar','Potassium')
classes <- data.matrix(data[,11])
n <- length(X[,1])
X
plotProportions<-function(eigen_values, print=FALSE) {
ks <- c(0)
props <- c(0)
RR <- sum(eigen_values)
for (k in 1:(r+1)) {
ks <- c(ks, k)
LL_r <- sum(eigen_values[1:k])
props <- c(props, LL_r/RR)
if (print)
cat('k =',k,':', fractions(LL_r/RR), '=', LL_r, '/', RR, fill=TRUE)
}
plot(ks, props, type="b",xlim=c(0,r))
}
plotProportionsTogether<-function(eigen_values, eigen_values_z) {
ks <- c(0)
props <- c(0)
props_z <- c(0)
RR <- sum(eigen_values)
RR_z <- sum(eigen_values_z)
for (k in 1:(r+1)) {
ks <- c(ks, k)
LL_r <- sum(eigen_values[1:k])
props <- c(props, LL_r/RR)
LL_r_z <- sum(eigen_values_z[1:k])
props_z <- c(props_z, LL_r_z/RR_z)
}
plot(ks, props, col="red", type="b", xlab = 'Number of PCs used', ylab = 'Proportion of variance explained', xlim=c(0,r))
grid()
points(ks, props_z, type="b", col="blue")
legend('bottomright', title='Data', legend=c('Non-standarized', 'Standarized'),
col=c('red','blue'), lty=1)
}
# Com
R <- cor(X)
# eigens
ev_z <- eigen(R)
eigen_values_z <- ev_z$values
V_z <- ev_z$vectors
plotProportions(eigen_values_z)
plotProportionsTogether(eigen_values, eigen_values_z)
plotProportionsTogether<-function(eigen_values, eigen_values_z) {
ks <- c(0)
props <- c(0)
props_z <- c(0)
RR <- sum(eigen_values)
RR_z <- sum(eigen_values_z)
for (k in 1:(r+1)) {
ks <- c(ks, k)
LL_r <- sum(eigen_values[1:k])
props <- c(props, LL_r/RR)
LL_r_z <- sum(eigen_values_z[1:k])
props_z <- c(props_z, LL_r_z/RR_z)
}
plot(ks, props, col="red", type="b", xlab = 'Number of PCs used', ylab = 'Proportion of variance explained', xlim=c(0,r))
grid()
points(ks, props_z, type="b", col="blue")
legend('bottomright', title='Data', legend=c('Non-standarized', 'Standarized'),
col=c('red','blue'), lty=1)
}
# Com
R <- cor(X)
# eigens
ev_z <- eigen(R)
eigen_values_z <- ev_z$values
V_z <- ev_z$vectors
#plotProportions(eigen_values_z)
plotProportionsTogether(eigen_values, eigen_values_z)
x_sample_mean
S
options(digits=2)
S
V
eigen_values
options(digits=3)
V
options(digits=2)
V
options(digits=0)
V
options(digits=1)
V
options(digits=2)
options(digits=3)
options(digits=2)
options(digits=3)
V
round(V, digits=2)
round(V, digits=3)
eigen_values
# Compute sample mean and S
Ones <- rep(1,n)
x_sample_mean <- 1/n * t(X)%*%Ones
S <- 1/(n-1) * t(X - Ones%*%t(x_sample_mean))%*%(X - Ones%*%t(x_sample_mean))
# eigens
ev <- eigen(S)
eigen_values <- ev$values
V <- ev$vectors
plotProportions(eigen_values, print=TRUE)
# Compute sample mean and S
Ones <- rep(1,n)
x_sample_mean <- 1/n * t(X)%*%Ones
S <- 1/(n-1) * t(X - Ones%*%t(x_sample_mean))%*%(X - Ones%*%t(x_sample_mean))
# eigens
ev <- eigen(S)
eigen_values <- ev$values
V <- ev$vectors
plotProportions(eigen_values, print=TRUE)
plotProportions<-function(eigen_values, print=FALSE) {
ks <- c(0)
props <- c(0)
RR <- sum(eigen_values)
for (k in 1:(r)) {
ks <- c(ks, k)
LL_r <- sum(eigen_values[1:k])
props <- c(props, LL_r/RR)
if (print)
cat('k =',k,':', fractions(LL_r/RR), '=', LL_r, '/', RR, fill=TRUE)
}
plot(ks, props, type="b",xlim=c(0,r))
}
# Compute sample mean and S
Ones <- rep(1,n)
x_sample_mean <- 1/n * t(X)%*%Ones
S <- 1/(n-1) * t(X - Ones%*%t(x_sample_mean))%*%(X - Ones%*%t(x_sample_mean))
# eigens
ev <- eigen(S)
eigen_values <- ev$values
V <- ev$vectors
plotProportions(eigen_values, print=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
options(digits=2)
#import data, table T5-8.dat, see example 5.8
data <- read.table("data/cereal.dat")
r <- 8
#set up X
X <- data.matrix(data[,3:10])
colnames(X) <- c('Calories','Protein','Fat','Sodium','Fiber','Carbohydrates','Sugar','Potassium')
classes <- data.matrix(data[,11])
n <- length(X[,1])
plotProportions<-function(eigen_values, print=FALSE) {
ks <- c(0)
props <- c(0)
RR <- sum(eigen_values)
for (k in 1:(r)) {
ks <- c(ks, k)
LL_r <- sum(eigen_values[1:k])
props <- c(props, LL_r/RR)
if (print)
cat('k =',k,':', fractions(LL_r/RR), '=', LL_r, '/', RR, fill=TRUE)
}
plot(ks, props, type="b",xlim=c(0,r))
}
# Compute sample mean and S
Ones <- rep(1,n)
x_sample_mean <- 1/n * t(X)%*%Ones
S <- 1/(n-1) * t(X - Ones%*%t(x_sample_mean))%*%(X - Ones%*%t(x_sample_mean))
# eigens
ev <- eigen(S)
eigen_values <- ev$values
V <- ev$vectors
plotProportions(eigen_values, print=TRUE)
plotProportionsTogether<-function(eigen_values, eigen_values_z) {
ks <- c(0)
props <- c(0)
props_z <- c(0)
RR <- sum(eigen_values)
RR_z <- sum(eigen_values_z)
for (k in 1:(r+1)) {
ks <- c(ks, k)
LL_r <- sum(eigen_values[1:k])
props <- c(props, LL_r/RR)
LL_r_z <- sum(eigen_values_z[1:k])
props_z <- c(props_z, LL_r_z/RR_z)
}
plot(ks, props, col="red", type="b", xlab = 'Number of PCs used', ylab = 'Proportion of variance explained', xlim=c(0,r))
grid()
points(ks, props_z, type="b", col="blue")
legend('bottomright', title='Data', legend=c('Non-standarized', 'Standarized'),
col=c('red','blue'), lty=1)
}
# Com
R <- cor(X)
# eigens
ev_z <- eigen(R)
eigen_values_z <- ev_z$values
V_z <- ev_z$vectors
#plotProportions(eigen_values_z)
plotProportionsTogether(eigen_values, eigen_values_z)
V_z
eigen_values_z
color <- c('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'light blue', 'black')
par(pty="s")
for (i in 1:r) {
vector_X <- c(0, V_z[i,1])
vector_Y <- c(0, V_z[i,2])
if (i==1)
plot(vector_X, vector_Y, type='b', xlab='Y_1', ylab='Y_2', xlim=c(-1,1), ylim=c(-1,1), col=color[i])
else
lines(vector_X, vector_Y, type='b', col=color[i])
}
points(c(0), c(0))
legend("topright", legend=c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8'),
col=color, lty=1, title="Variates")
grid()
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
legend("topright", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=classes, lty=1, title="Classes")
grid()
classes
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
legend("topleft", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=c('red', 'black', 'green'), lty=1, title="Classes")
grid()
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
legend("topleft", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=c('red', 'black', 'green'), title="Classes")
grid()
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
legend("topleft", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=c('red', 'black', 'green'), lty=1, title="Classes")
grid()
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
legend("topleft", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=c('red', 'black', 'green'), pt.lwd
=1, title="Classes")
grid()
legend("topleft", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=c('red', 'black', 'green'), pt.lwd=1, title="Classes")
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
legend("topleft", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=c('red', 'black', 'green'), pt.lwd=1, title="Classes")
grid()
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
legend("topleft", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=c('red', 'black', 'green'), pch='o', lty=1, title="Classes")
grid()
Y_scores <- X %*% V_z[,1:2]
#replace(classes, rep(length(classes)), c(rep('red',17), rep('blue',20), rep('green', 6)))
plot(Y_scores[,1], Y_scores[,2], xlab='Y_1', ylab='Y_2', col=classes)
legend("topleft", legend=c('General Mills (G)', 'Kellogs (K)', 'Quaker (Q)'),
col=c('red', 'black', 'green'), pch='o', lty=0, title="Classes")
grid()
plot(rep(1:r), eigen_values, type='b', col='red', xlab='Eigen-value index', ylab='Eigen-value value')
plot(rep(1:r), eigen_values_z, type='b', col='blue', xlab='Eigen-value index', ylab='Eigen-value value', newplot=FALSE)
grid()
plot(rep(1:r), eigen_values, type='b', col='red', xlab='Eigen-value index', ylab='Eigen-value')
plot(rep(1:r), eigen_values_z, type='b', col='blue', xlab='Eigen-value index', ylab='Eigen-value', newplot=FALSE)
grid()
plot(rep(1:r), eigen_values, type='b', col='red', xlab='Eigen-value index', ylab='Eigen-value')
grid()
plot(rep(1:r), eigen_values_z, type='b', col='blue', xlab='Eigen-value index', ylab='Eigen-value')
grid()
plotProportions(eigen_values_z, print=TRUE)
#plotProportions(eigen_values_z, print=TRUE)
plotProportionsTogether(eigen_values, eigen_values_z)
